%% MASTER_SpectralConnectivity.m
% runs imaginary coherence and phase-slope index analysis on gamma events
% generated by MASTER_CollectGammaEvents
%
% Julien Catanese & Matthijs van der Meer

%% set paths
restoredefaultpath;
cd('D:\My_Documents\GitHub\fieldtrip');
ft_defaults;

rmpath('D:\My_Documents\GitHub\fieldtrip\external\signal\');

addpath(genpath('D:\My_Documents\GitHub\vandermeerlab\code-matlab\shared'));
addpath(genpath('D:\My_Documents\GitHub\vandermeerlab\code-matlab\tasks\Julien_linear_track')); % Detect events, CountCycles live here

%% load gamma events (use MASTER_CollectGammaEvents.m to obtain) -- puts ALL_evt variable in workspace
cd('D:\My_Documents\Dropbox\projects\Julien_multiLFP\2016-01-07');
%load(FindFile('gamma*.mat'));
load gammaEvents_20160107;

%% define what to run
rats = {'R026','R032','R033','R039'};
PARAM.twin = 0.2; % half-width of time window to use for making trials (relative to event centers)
PARAM_psi_bandwidth = 4; % this is important: frequency range to compute slope over
PARAM_restrict = 'rest'; % 'task', 'rest', 'all'
debug = 0;

%% ft config
cfg_freqanalysis              = [];
cfg_freqanalysis.output       = 'fourier';
cfg_freqanalysis.method       = 'mtmfft';
cfg_freqanalysis.taper        = 'dpss';
cfg_freqanalysis.pad          = 10;
cfg_freqanalysis.tapsmofrq    = 4; % def 8
cfg_freqanalysis.foi          = 40:1:120;
cfg_freqanalysis.keeptrials   = 'yes';
cfg_freqanalysis.channel      = {'vStr','mPFC'};
cfg_freqanalysis.channelcmb   = 'all';

%%
available_rats = fieldnames(ALL_evt);
nRats = 0; nSessions = 0;
total_lg = 0; total_hg = 0;

for iRat = 1:length(rats)
    
    this_rat = rats{iRat};
    
    if ~strmatch(this_rat,available_rats)
       warning('Rat %s not available -- skipping...',rats{iRat});
       continue;
    end
    
    available_sessions = fieldnames(ALL_evt.(this_rat));
    
    for iSession = 1:length(available_sessions)
    
        this_session = available_sessions{iSession};
        this_session_data = ALL_evt.(this_rat).(this_session);
        
        fprintf('\n\nProcessing session %s...\n',this_session);
        
        this_fd = this_session_data.fd;
        cd(this_fd);
        
        % load the data - ft version
        LoadExpKeys;
        
        cfg = [];
        cfg.fc = {ExpKeys.goodGamma_vStr{1},ExpKeys.goodGamma_PFC{1}};
        data = ft_read_neuralynx_interp(cfg.fc); % this will give many warnings, but is ok
        data.label = {'vStr','mPFC'};
        data.hdr.Fs = data.fsample; % we need this later -- should be set by ft_read_neuralynx_interp
        
        % restrict, if needed
        switch PARAM_restrict
            case 'task'
                this_session_data.lg = restrict(this_session_data.lg,ExpKeys.TimeOnTrack,ExpKeys.TimeOffTrack);
                this_session_data.hg = restrict(this_session_data.hg,ExpKeys.TimeOnTrack,ExpKeys.TimeOffTrack);
            case 'rest'
                this_session_data.lg = restrict(this_session_data.lg,[ExpKeys.TimeOnPre ExpKeys.TimeOnPost],[ExpKeys.TimeOffPre ExpKeys.TimeOffPost]);
                this_session_data.hg = restrict(this_session_data.hg,[ExpKeys.TimeOnPre ExpKeys.TimeOnPost],[ExpKeys.TimeOffPre ExpKeys.TimeOffPost]);
        end
        
        % trialify
        hg_t = IVcenters(this_session_data.hg);
        lg_t = IVcenters(this_session_data.lg);
        
        total_lg = total_lg + length(lg_t);
        total_hg = total_hg + length(hg_t);
        
        cfg = [];
        cfg.t = cat(1,lg_t,hg_t);
        cfg.t = cfg.t - this_session_data.firstTimestamp;
        cfg.twin = [-PARAM.twin PARAM.twin];
        cfg.hdr = data.hdr;
        
        trl = ft_maketrl(cfg);
        
        cfg = [];
        cfg.trl = trl;
        data_trl = ft_redefinetrial(cfg,data);
        
        % inspect
        if debug
            ft_databrowser([],data_trl);
        end
        
        % compute power spectrum - basis for what comes next, this cfg is
        % important!!
        freq = ft_freqanalysis(cfg_freqanalysis, data_trl);
        
        % compute imaginary coherence: NOTE should add variability estimate
        cfg_conn       = []; cfg_conn.method    = 'coh'; cfg_conn.complex = 'angle';
        cohi           = ft_connectivityanalysis(cfg_conn, freq);
        
        ALL_evt.(this_rat).(this_session).coh.cohspctrm = sq(cohi.cohspctrm(1,2,:)).*(360/(2*pi)); % convert to degrees
        ALL_evt.(this_rat).(this_session).coh.cohfreq = cohi.freq;
        
        % compute psi
        cfg_psi           = [];
        cfg_psi.method    = 'psi';
        cfg_psi.bandwidth    = PARAM_psi_bandwidth;
        cfg_psi.jackknife = 'yes';
        psi      = ft_connectivityanalysis(cfg_psi, freq);
        
        ALL_evt.(this_rat).(this_session).psi.psispctrm = sq(psi.psispctrm(1,2,:)).*(360/(2*pi)^2); % convert to degrees -- see psi_unit_check
        ALL_evt.(this_rat).(this_session).psi.psispctrmsem = sq(psi.psispctrmsem(1,2,:)).*(360/(2*pi)^2);
        ALL_evt.(this_rat).(this_session).psi.freq = psi.freq;     
        
        if debug
            figure, 
            plot(psi.freq(1:end-5), sq(psi.psispctrm(1,2,1:end-5))),
            hold on,  plot(psi.freq(1:end-5), (sq(psi.psispctrm(1,2,1:end-5)) + (sq(psi.psispctrmsem(1,2,1:end-5)))),':r') ;
            hold on,  plot(psi.freq(1:end-5), (sq(psi.psispctrm(1,2,1:end-5)) - (sq(psi.psispctrmsem(1,2,1:end-5)))),':r');
            hold on,  plot(psi.freq, psi.freq*0, '--k');
            xlim([20 120]);
        end
        
    end % loop over sessions
            
end % loop over rats

fprintf('\n\n %d lg, %d hg events used',total_lg,total_hg);